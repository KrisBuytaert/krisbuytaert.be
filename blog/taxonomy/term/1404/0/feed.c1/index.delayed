<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xml:base="http://127.0.0.1:8080/blog"  xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
 <title>Everything is a Freaking DNS problem - platform</title>
 <link>http://127.0.0.1:8080/blog/taxonomy/term/1404/0</link>
 <description></description>
 <language>en</language>
<item>
 <title>Giving Devs a Dev platform</title>
 <link>http://127.0.0.1:8080/blog/giving-devs-dev-platform</link>
 <description>&lt;p&gt;It&#039;s a typical situation,  the developers develop on their own boxen, they only start to integrate their code on on the  production platform 3 hours before the deadline.   And then the problems start, the typical &quot;But it works on my system&quot;  , &quot;its your problem now&quot; is something nobody really likes to hear .&lt;/p&gt;
&lt;p&gt;So how do you tackle this problem ? &lt;a href=&quot;http://devops-abyss.blogspot.com/2010/03/application-is-only-running-on.html&quot; rel=&quot;nofollow&quot;&gt;As Christian already mentions Talking&lt;/a&gt;  is the first step of the solution,&lt;/p&gt;
&lt;p&gt;But one of the most satisfying approaches to solve this problem is to provide your development teams with a standard platform that you support, and a platform they can play with ,  if you can&#039;t provide them with a fully defined platform, give them a set of guide lines on what they can expect.  Things like library versions, database types , memory availability and storage availability  are key components of such guidelines.&lt;/p&gt;
&lt;p&gt;My platform of choice for this kind of projects today is to for an Enterprise Level distro,  a distro that stays stable for a longer period, not one that is bleeding edge and changes every other week.  So a CentOS or a Debian based distro is probably going to be the platform of choice.  But a stable standard platform also means that all the latest nice features a developer wants to have from the bleeding edge libraries he is using aren&#039;t going to be available .&lt;/p&gt;
&lt;p&gt;Sometimes your devs really need those features, sometimes its just a nice to have.  On the other hand you as an ops guy don&#039;t want to be packaging and configurating every single tool they dream off.  As usual in a Devops environment the key can be found in communication ... Talking with the devs will teach you what features they really need and how they might solve things in a different, more standardized way&lt;/p&gt;
&lt;p&gt;We&#039;ve learned that by giving them a default platform   and keeping an open conversation  helps,  some developers take longer to understand the process others jump in right away .. but in the long term  you really need to talk to your devs as soon as possible when they think of implementing a new project  that has to run on your platorms.&lt;/p&gt;
&lt;p&gt;Lets you sleep at night ..&lt;/p&gt;
</description>
 <comments>http://127.0.0.1:8080/blog/giving-devs-dev-platform#comments</comments>
 <category domain="http://127.0.0.1:8080/blog/taxonomy/term/480">centos</category>
 <category domain="http://127.0.0.1:8080/blog/category/devops">devops</category>
 <category domain="http://127.0.0.1:8080/blog/category/platform">platform</category>
 <category domain="http://127.0.0.1:8080/blog/category/standardize">standardize</category>
 <pubDate>Mon, 14 Jun 2010 20:51:41 +0000</pubDate>
 <dc:creator>Kris Buytaert</dc:creator>
 <guid isPermaLink="false">1010 at http://127.0.0.1:8080/blog</guid>
</item>
</channel>
</rss>
